import * as React from 'react'
export default function Exercicio02({initialName = ''}) {
  // üê® initialize the state to the value from localStorage
  // üí∞ window.localStorage.getItem('name') || initialName
  const [name, setName] = React.useState(
      //Recuperando de um valor previamente salvo no localStorage.
      //Ou usa o valor de initialName, caso o √çtem do localStorage
      //n√£o exista.

      //retornando uma fun√ß√£o para criar um lazy initializer, que √© executado apenas uma vez, no carregamento inicial da p√°gina.
      () =>readStorage() ||initialName)

    const [count, setCount] = React.useState(() => 0)
    
    function readStorage() {
        console.count('Lido localStorage')
        return window.localStorage.getItem('name')
    }

  // üê® Here's where you'll use `React.useEffect`.
  // The callback should set the `name` in localStorage.
  // üí∞ window.localStorage.setItem('name', name)
  // Armazenando em um √≠tem do localStorage chamado "name" o valor
  // da vari√°vel de estado name
  React.useEffect(() => {
      window.localStorage.setItem('name', name)
      setCount(count + 1)
    }, [name])

    //UseEffect() tem dois par√¢metros:
    //1) √â uma fun√ß√£o que ser√° atualizada depois de uma atualiza√ß√£o do componente.
    //2) √â um vetor de depend√™ncias: qual ou quais as vari√°veis de estado que ser√£o monitoradas para a execuss√£o do useEffect().
    //O segundo par√¢metro √© funcional, mas faz muita diferen√ßa ele ser usado.


  function handleChange(event) {
    // Atualiza√ß√£o da vari√°vel de estado "name" vai desencadear
    // uma atualiza√ß√£o do componente. Ap√≥s a atualiza√ß√£o ter sido processada, ser√° executado o useEffect().
    setName(event.target.value)

  }
  return (
    <div>
      <form>
        <label htmlFor="name">Name: </label>
        <input value={name} onChange={handleChange} id="name" />
      </form>
      {name ? <strong>Ol√° {name}! Seja bem vindo.</strong> : 'Por favor, digite seu nome'}
      <div>Quantidade de atualiza√ß√µes: {count} !</div>
    </div>
  )
}